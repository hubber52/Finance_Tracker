import React, { useContext, useState, useEffect } from 'react';
import BudgetNavigation from '../Components/BudgetNavigation';
import { APIContext } from '../Contexts/APIContext';
import axios from 'axios';
import Navigation from '../Components/Navigation';

import '../Styles/Pages/crudSummary.css';
import '../Styles/Components/CrudTableStyle.css';

type Income = {
    id: number, //Primary Key Generated by Backend
    username?: string,
    user?: string,  //Current User
    income_amount : number,
    income_name?: string,
    income_type ?: string,
    income_rate : string,
    income_notes ?: string,
    income_datetime?: string,
}

interface IncomeEdit {
    income_amount: number;
    income_name?: string;
    income_type? : string;
    income_rate: string;
    income_notes?: string;
}

// Only show these columns in our table
type ColumnKey = keyof Omit<Income, 'user' | 'username' | 'income_datetime'>;

const columns: ColumnKey[] = [
    'id',
    'income_amount',
    'income_name',
    'income_type',
    'income_rate',
    'income_notes',
];

const IncomeSummary: React.FC = () => {
  // Pull baseUrl from the context
  const baseUrl  = useContext(APIContext);
  const fetchUrl = `${baseUrl}/income/get`;
  const editUrl = `${baseUrl}/income`;


  const [incomes, setIncomes] = useState<Income[]>([]);
  const [showEditForm, setShowEditForm] = useState<boolean>(false);
  const [editPk, setEditPk] = useState<number>();
  const [editForm, setEditForm] = useState<IncomeEdit>({
    income_name : '',
    income_amount : 0,
    income_type : '',
    income_rate : "Weekly",
    income_notes : '',
  }

  );

  // Fetch the list on mount (and whenever fetchUrl changes)
    const getAll = useEffect(() => {
        const loadIncomes = async () => {
            try {
                const token = localStorage.getItem('access_token');
                const incomeData = await axios.get<Income[]>(fetchUrl, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setIncomes(incomeData.data);

        } 
            catch (err) {
                console.error('Failed to load incomes', err);
            }
        };
        loadIncomes();
    }, [fetchUrl]);

  // Delete handler
    const handleDelete = async (id: number) => {
        if (!window.confirm('Delete this income?')) return;

        try {
            console.log("Primary Key ID: ", id)
            const token = localStorage.getItem('access_token');
            await axios.delete(`${editUrl}/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
        })
        .then(function(response){
            console.log("Delete Response", response)
        });
        setIncomes(prev => prev.filter(event => event.id !== id));
        } 
        catch (err) {
            console.error('Failed to delete income', err);
        }
    };

    //Update edit form values as user types.
    const handleEditFormChange = (event : any) => {
      const { name, value } = event.target; // Destructure name and value from the event target
      setEditForm((prevFormData : any) => ({
        ...prevFormData, // Spread the previous state to maintain other field values
        [name]: value,   // Update the specific field using its name as a dynamic key
      }));
    };

    //Initialzes and renders edit forms
    const handleEditForm = (incomeObject : Income) => {
        setEditPk(incomeObject.id);
        //Set initial state of rendered forms.
        setEditForm({income_name : incomeObject.income_name,
            income_amount : incomeObject.income_amount,
            income_type : incomeObject.income_type,
            income_rate : incomeObject.income_rate,
            income_notes : incomeObject.income_notes,
        }
        )
        setShowEditForm(!showEditForm);
    }

    //Submits edit form updates to server and reloads page
    const handleEditRequest = async(event : any) => {
        event.preventDefault();
        const token = localStorage.getItem('access_token');
        try{
            console.log("Sending Put Request");
            await axios.put(`${editUrl}/${editPk}`, {
                income_name : editForm.income_name,
                income_amount: editForm.income_amount,
                income_type: editForm.income_type,
                income_rate: editForm.income_rate,
                income_notes: editForm.income_notes,
            }, {
                headers: { Authorization: `Bearer ${token}` },
            })
            .then(function(response){
                console.log("Put Response", response);
                setShowEditForm(!showEditForm);
            })
            .then(function(response) {
                window.location.reload()
            })
        }
        catch(err){
            console.log("Error updating the table", err);
        }
    }

  return (
    <div>
      <Navigation />
      <div className="main-content"> 
      <BudgetNavigation />
      {!showEditForm && <table className = "crud-table">
        <thead>
          <tr>
            {//Use slice to omit the "id" field from displaying on the table
            columns.slice(1).map(columnHead => (
              <th key={columnHead}>{columnHead}</th>
            ))}
          </tr>
        </thead>

        <tbody>
          {incomes.map(incomeObject => (
            <>
            <tr key={incomeObject.id}>
              {//Use slice to omit the "id" field from displaying on the table
              columns.slice(1).map((item, index : number) => (
                <td key={index}>{incomeObject[item]}</td>
              ))}

              <td>
                 <button onClick={() => handleEditForm(incomeObject)}>
                    Edit
                </button>
              </td>
              <td>
                {!showEditForm && 
                <button onClick={() => handleDelete(incomeObject.id)}>
                    Delete
                </button>
                }
              </td>
            </tr>
            </>
          ))}
        </tbody>
      </table>}
        {
        showEditForm && <form className = "crudForm" onSubmit = {handleEditRequest}>
            <label> income_name
                <input
                    type = "text"
                    name = "income_name"
                    value = {editForm.income_name}
                    onChange = {handleEditFormChange}
                />
            </label>
            <label> income_amount
                <input
                    type = "number"
                    name = "income_amount"
                    value = {editForm.income_amount}
                    onChange = {handleEditFormChange}
                />
            </label>
            <label> income_type
              <input type="text"
              name="income_type" 
              value={editForm.income_type} 
              onChange={handleEditFormChange}>

              </input>
            </label>
            <label> income_notes
                <input
                    type = "text"
                    name = "income_notes"
                    value = {editForm.income_notes}
                    onChange = {handleEditFormChange}
                />
            </label>
            <label> income_rate
              <select name="income_rate" value={editForm.income_rate} onChange={handleEditFormChange}>
                <option value="Weekly">Weekly</option>
                <option value="Monthly">Monthly</option>
                <option value="Annually">Annually</option>
              </select>
            </label>
            <button className = "crudFormSubmitButton" type="submit"> Submit </button>
            <button onClick = {() => setShowEditForm(!showEditForm)}> Cancel </button>
        </form>
        }
        </div>
    </div>
  );
};

export default IncomeSummary;