import { useState, useContext, useEffect } from 'react';
import BudgetNavigation from '../Components/BudgetNavigation';
import {useNavigate} from 'react-router-dom';
import axios from 'axios';
import { APIContext } from '../Contexts/APIContext';
import { PieChart } from 'react-minimal-pie-chart';
import Navigation from '../Components/Navigation';

import '../Styles/Components/CrudTableStyle.css';

const OverviewPage = () => {

    type Expense = {
        id: number;
        expense_name?: string;
        user: string;
        expense_category: string;
        expense_amount: number;
        expense_notes?: string;
        expense_rate: string;
        expense_date: string;
    }
    type Debt = {
        id: number;
        user: string;
        username: string;
        debt_amount: number;
        debt_payment: number;
        debt_name?: string;
        debt_rate: string;
        debt_interest: number;
        debt_notes?: string;
        debt_datetime: string;
    }
    type Income = {
        id: number, //Primary Key Generated by Backend
        username: string,
        user: string,  //Current User
        income_amount : number,
        income_name: string,
        income_type: string,
        income_rate: string,
        income_notes: string,
        income_datetime: string,
    }

    type FilteredExpense = Omit<Expense, 'expense_date' | 'user'>
    type FilteredDebt = Omit<Debt, 'user' | 'debt_datetime' | 'username'>
    type FilteredIncome = Omit<Income, 'user' | 'income_datetime' | 'username'>

    const defaultFilteredExpense : FilteredExpense = {
        id : 0,
        expense_name: "",
        expense_category: "",
        expense_amount: 0,
        expense_notes: "",
        expense_rate: "Weekly",
    }
    const defaultFilteredDebt : FilteredDebt = {
        id: 0,
        debt_amount: 0,
        debt_payment: 0,
        debt_name: "",
        debt_rate: "Weekly",
        debt_interest: 0,
        debt_notes: "",
    }

    const defaultFilteredIncome : FilteredIncome = {
        id: 0, //Primary Key Generated by Backend
        income_amount : 0,
        income_name: "",
        income_type: "",
        income_rate: "Weekly",
        income_notes: "",
    }
    const [chartPositive, setChartPositive] = useState<boolean>(true);
    const [totalWeeklySavings, setTotalWeeklySavings] = useState<number>(0);
    const [expenses, setExpenses] = useState<FilteredExpense[]>([defaultFilteredExpense]);
    const [debts, setDebts] = useState<FilteredDebt[]>([defaultFilteredDebt]);
    const [incomes, setIncomes] = useState<FilteredIncome[]>([defaultFilteredIncome]);
    const [pageState, setPageState] = useState<string>("Overview");
    const [totalWeeklyExpenses, setTotalWeeklyExpenses] = useState<number>(0);
    const [totalWeeklyIncome, setTotalWeeklyIncome] = useState<number>(0);
    const [debtWeeklyPayment, setDebtWeeklyPayment] = useState<number>(0);
    const [essentialWeeklyExpenses, setEssentialWeeklyExpenses] = useState<number>(0);
    const [discretionaryWeeklyExpenses, setDiscretionaryWeeklyExpenses] = useState<number>(0);
    const [totalWeeklyCash, setTotalWeeklyCash] = useState<number>(0);

    const [totalIncomes, setTotalIncomes] = useState<number>(0);
    const [totalDebts, setTotalDebts] = useState<number>(0);
    const [totalExpenses, setTotalExpenses] = useState<number>(0);

    const navigate = useNavigate();
    const url = useContext(APIContext);
    const token = localStorage.getItem('access_token');
    const debtURL = `${url}debt/get`;
    const incomeURL = `${url}income/get`;
    const expenseURL = `${url}expense/get`;
    const totalWeeklyIncomeURL = `${url}income/get/total`;
    const totalWeeklyExpenseURL = `${url}expense/get/total`;
    const totalWeeklyEssentialExpenseURL = `${url}expense/get/totalessential`;
    const totalWeeklyDiscretionaryExpenseURL = `${url}expense/get/totaldiscretionary`;
    const debtWeeklyPaymentURL = `${url}debt/get/payment`;

        const GetIncome = async() => {
            try{
                const incomeData = await axios.get<FilteredIncome[]>(incomeURL, {
                    headers: { Authorization: `Bearer ${token}` }
                });

                setIncomes(incomeData.data)
                console.log("Incomes", incomes)
            }
            catch{
                console.log("Failed to retrieve Income")
            }
        }
        const GetDebt = async() => {
            try{
                const debtData = await axios.get<FilteredDebt[]>(debtURL, {
                    headers : { Authorization: `Bearer ${token}` }
                });
                setDebts(debtData.data);
                console.log("Debt" , debtData.data);
            }
            catch{
                console.log("Failed to get debts");
            }
        }

        const GetExpense = async() => {
            try{
                const expenseData = await axios.get<FilteredExpense[]>(expenseURL, {
                    headers: { Authorization: `Bearer ${token}`}
                })
                console.log("Expenses", expenseData.data)
                setExpenses(expenseData.data);
            }
            catch{
                console.log("Failed to get Expenses")
            }
        }

        const GetTotalWeeklyIncome = async() =>{
            try{
                const totalWeeklyIncomeData = await axios.get(totalWeeklyIncomeURL, {
                    headers : { Authorization : `Bearer ${token}`}
                });
                setTotalWeeklyIncome(totalWeeklyIncomeData.data['income_amount']);
            }
            catch{
                console.log("Failed to get total income")
            }
        }

        const GetTotalWeeklyExpenses = async() => {
            try{
                const totalWeeklyExpenseData = await axios.get(totalWeeklyExpenseURL, {
                    headers : { Authorization: `Bearer ${token}`}
                });
                const totalWeeklyDiscretionaryData = await axios.get(totalWeeklyDiscretionaryExpenseURL, {
                    headers : { Authorization: `Bearer ${token}`}
                });

                const totalWeeklyEssentialData = await axios.get(totalWeeklyEssentialExpenseURL, {
                    headers : { Authorization: `Bearer ${token}`}
                });

                setTotalWeeklyExpenses(totalWeeklyExpenseData.data['expense_amount']);
                console.log(totalWeeklyExpenseData.data, "Format")
                setDiscretionaryWeeklyExpenses(totalWeeklyDiscretionaryData.data['expense_discretionary_total']);
                setEssentialWeeklyExpenses(totalWeeklyEssentialData.data['expense_essential_total']);
                console.log(totalWeeklyDiscretionaryData.data);
            }
            catch{
                console.log("Failed to get total expenses")
            }
        }

        const GetDebtWeeklyPayment = async() => {
            try{
                const paymentWeeklyData = await axios.get(debtWeeklyPaymentURL, {
                    headers : { Authorization: `Bearer ${token}`}
                });
                setDebtWeeklyPayment(paymentWeeklyData.data['debt_payment']);
            }
            catch{
                console.log("Failed to retrieve Debt Payments")
            }
        }

    const CalculateTotals = (e : FilteredExpense[], d: FilteredDebt[], i: FilteredIncome[]) => {
        let totalExpense = 0;
        let totalDebt = 0;
        let totalIncome = 0;

        e.map(item => (
            totalExpense += item["expense_amount"]
        ));
        
        d.map(item => {
            totalDebt += item["debt_amount"]
        });

        i.map(item => {
            totalIncome += item["income_amount"]
        });

        setTotalIncomes(totalIncome);
        setTotalDebts(totalDebt);
        setTotalExpenses(totalExpense);
    }

    const pieChart = () => {
        const netCash = totalWeeklyIncome - totalWeeklyExpenses - debtWeeklyPayment
        setTotalWeeklySavings(Math.round(netCash*100)/100);
        if (netCash >= 0){
            setChartPositive(true)
        }
        else{
            setChartPositive(false)
        }
    }

    useEffect(() => {
        GetIncome();
        GetDebt();
        GetExpense();
        GetTotalWeeklyIncome();
        GetTotalWeeklyExpenses();
        GetDebtWeeklyPayment();
    }, [])

    useEffect( () => {
        CalculateTotals(expenses, debts, incomes);
    }, [expenses, debts, incomes])

    useEffect( ()=> {
        setTotalWeeklyCash(totalWeeklyIncome - totalWeeklyExpenses - debtWeeklyPayment);
        pieChart();
    }, [totalWeeklyIncome, totalWeeklyExpenses, debtWeeklyPayment, discretionaryWeeklyExpenses, essentialWeeklyExpenses])

    return (
    <div>
        <Navigation />
        <div className="main-content"> 
        <BudgetNavigation />
        <div></div>
        <div></div>
        <table className="crud-table">
            <thead>
                <tr>
                    <th> Total Debts </th>
                    <th> Weekly Expenses </th>
                    <th> Weekly Debts </th>
                    <th> Weekly Income </th>
                    <th> Total Weekly Savings </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td> {totalDebts.toFixed(2)} </td>
                    <td> {totalWeeklyExpenses.toFixed(2)} </td>
                    <td> {debtWeeklyPayment.toFixed(2)} </td>
                    <td> {totalWeeklyIncome.toFixed(2)} </td>
                    <td> {totalWeeklyCash.toFixed(2)} </td>
                </tr>
            </tbody>
            
        </table>
        <div></div>
        <h1>Financial Overview</h1>
        {chartPositive && <div>
            <PieChart
            style={{ height: '350px', padding: '20px'}}

            label={({ dataEntry }) => (dataEntry.title + ": " + dataEntry.value)}

            labelStyle={{  
                "fontSize": "5px",
                "fontFamily": "sans-serif"}}
            labelPosition={120}
            radius={25}
            data={[
                { title: 'Debt Payments', value: debtWeeklyPayment, color: '#E38627', },
                { title: 'Essential Expenses', value: essentialWeeklyExpenses, color: '#C13C37' },
                { title: 'Discretionary Expenses', value: discretionaryWeeklyExpenses, color: '#6A2135' },
                { title: 'Savings', value: totalWeeklySavings, color: '#FF0000' }
            ]}
            />
        </div>
        }
        {!chartPositive && <div>
            <PieChart
            style={{ height: '350px', padding: '20px'}}

            label={({ dataEntry }) => (dataEntry.title + ": " + dataEntry.value)}

            labelStyle={{  
                "fontSize": "5px",
                "fontFamily": "sans-serif"}}
            labelPosition={120}
            radius={25}
            data={[
                { title: 'Debt Payments', value: debtWeeklyPayment, color: '#E38627', },
                { title: 'Essential Expenses', value: essentialWeeklyExpenses, color: '#C13C37' },
                { title: 'Discretionary Expenses', value: discretionaryWeeklyExpenses, color: '#6A2135' },
            ]}/>
        </div>}
        <div></div>
        <table className = "crud-table">
            <thead>
                <tr>
                {
                Object.keys(defaultFilteredIncome).slice(1,).map(key => (
                    <th key={key}>
                        {key}
                    </th>
                ))
                }
                </tr>
            </thead>

            <tbody>
                {
                incomes.map((rowData : FilteredIncome) => (
                <tr key={rowData.id}>
                    {
                    Object.keys(defaultFilteredIncome).slice(1,).map(col => {
                        const colKey = col as keyof FilteredIncome;
                        return(
                        <td key={colKey}>
                            { rowData[colKey] }
                        </td>);
                    }
                    )
                    }
                </tr>
                )
            )
            }

            </tbody>

        </table>
        <div></div>
        <table className="crud-table">
            <thead>
                <tr>
                {Object.keys(defaultFilteredExpense).slice(1,).map(key => (
                    <th key={key}>
                        {key}
                    </th>
                ))}
                </tr>
            </thead>
            <tbody>
                {
                expenses.map((rowData: FilteredExpense) => (
                    <tr key={rowData.id}>
                        {
                            Object.keys(defaultFilteredExpense).slice(1,).map(key => 
                                {
                                    const colKey = key as keyof FilteredExpense;
                                    return(
                                        <td key={colKey}>
                                            {rowData[colKey]}
                                        </td>
                                    );
                                })
                        }
                    </tr>
                ))}
            </tbody>
        </table>
        <div></div>
        <table className="crud-table">
            <thead>
                <tr>
                {Object.keys(defaultFilteredDebt).slice(1,).map(key => (
                    <th key={key}>
                        {key}
                    </th>
                ))}
                </tr>
            </thead>
            <tbody>
                {
                    debts.map((rowData : FilteredDebt) => (
                        <tr key={rowData.id}>
                        {Object.keys(defaultFilteredDebt).slice(1,).map(key => {
                            const colKey = key as keyof FilteredDebt;
                            return(
                                <td key={colKey}>
                                    {rowData[colKey]}
                                </td>
                            );
                        })
                        }
                        </tr>
                    ))
                }
                
            </tbody>
        </table>
        </div>
    </div>
    );

}

export default OverviewPage;